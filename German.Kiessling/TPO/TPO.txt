Programación de Sistemas Embebidos - Repaso de lenguaje C - Trabajo Práctico 0
==============================================================================

Bibliografia: 
	Brian Kernighan y Dennis Ritchie, El lenguaje de programación C (título
	original en inglés: The C Programming Language)

	Eduardo Grosclaude, Taller de Lenguaje en C
	http://se.fi.uncoma.edu.ar/pse2020/taller-c/index.html

0. Escriba un programa hello world. Compilar y ejecutar.
   Por ejemplo: 
		vi hello.c   # edicion. Usar vi u otro editro de predileccion
		make hello   # compilacion
		./hello	     # ejecucion

-- Archivo hello ---

1. Enumerar los tipos de datos básicos en C. 
   Escriba una definición de una variable de cada tipo. Por ej.  :  int a;

Tipos de datos basicos :
    * int ,unsigned int , long int , unsigned long int      -> 4 bytes 
    * short int, unsigned short int                         -> 2 bytes
    * char , unsigned char                                  -> 1 Bytes 
    * double                                                -> 8 bytes
    * float                                                 -> 4 bytes
    * long double                                           -> 12 bytes
    

2. Explique qué significa la palabra word cuando el contexto es la 
   Arquitectura de una Computadora.

    * Se refiere al tamaño de los registros del procesador en bits.

3. ¿Cuántos bits puede almacenar una variable declarada como int (ej. int var;)
    en 3 computadoras de arquitecturas diferentes: arquitecturas de 8bits, 32bits 
    y 64bits?.

    NOTA: la respuesta no es tan trivial como parece. Deberá buscar información
          sobre el lenguaje de programación C. Use wikipedia u otros recursos.


    El lenguaje C no define el tamaño de los objetos de datos de un tipo determinado. Es decir, un entero
    puede ocupar 16 bits en una implementación, 32 en otra, o aun 64. Un long puede tener o no más bits
    que un int. Un short puede ser o no más corto que un int. Según K&R, lo único seguro es que "un
    short no es mayor que un int, que a su vez no es mayor que long".

    Por supuesto, distintos tamaños en bits implican diferentes rangos de valores. Si deseamos portar un
    programa, hecho bajo una implementación del compilador, a otra, no es posible asegurar a priori el
    rango que tomará un tipo de datos. La fuente ideal para conocer los rangos de los diferentes tipos, en
    una implementación determinada, es -además del manual del compilador- el header limits.h de la
    biblioteca standard. Debe recordarse que cualquier suposición que hagamos sobre el rango o tamaño
    de un objeto de datos afecta la portabilidad de un programa en C.

    Sacado de " https://wiki.cs.famaf.unc.edu.ar/lib/exe/fetch.php?media=algo1:curso-c.pdf "

4. Explique la difercia en la salida de las siguientes instrucciones:

   char a = 'M';
   printf ("a = %i \n", a);                     -> %i : entero    a = 77
   printf ("La letra %c \n", a);                -> %c : caracter  a = M

   ¿Cuál es el valor numérico de a?


5. ¿Cuál es el rango numérico de i y j?
   
   char i;                       -> -128 a +127
   unsigned char j;              -> 0 a 255

6. ¿Cuál es el valor en base 2 (binario) de i, j, k, m, n, p ?

   char i = 'a';
   char j = 77;
   char k = 0x4D;
   unsigned char m = 'a';
   unsigned char n = 0x4d;
   unsigned char p = 'A';

   Explique el por qué de su repuesta. Contestar: Las variables
   anteriores, ¿fueron declaradas e inicializadas con valores diferente?

        Con signo:
        i = 0110 0001  // ASCII a = 97
        j = 0100 1101  // 77
        k = 0100 1101  // Hexadeciaml = 77
        Sin signo:
        m = 0110 0001  // ASCII a = 97
        n = 0100 1101  // Hexadecimal 77
        p = 0100 0001  // ASCII A = 65


7. Arreglos, Punteros y operaciones
-----------------------------------

Comprender las siguientes definiciones y operaciones


main () {

	int x[3];
	int *ptr;

	char a;
	char *b;

        x[0] = 1024;
        x[1] = 32;
        x[2] = -1;
	ptr = &x[0];
	ptr++;
	ptr++;

	a = 5;
	b = &a;
	printf ("a=%i, lo apuntado por b=%i, el contenido de b=%X, y la direccion de b=%X \n", a, *b, b, &b);
	
	*b = 21;
}


Si al comenzar el programa el sistema asignó la dirección 0xFFA00004 al
arreglo x[], 
	¿Cuál es el valor final del contenido de ptr al finalizar la
	ejecución del programa? -1

	¿Cuál es el valor final del contenido de la variable 'a' al 
	finalizar el programa? 5

	¿Cuál es la dirección de la variable x[2]? 0xFFA00004 + 2*(sizeof(int)).

7.2 Arreglos y punteros: Comprender el siguiente código.

unsigned int array[5];      -> Arreglo de elementos enteros sin signo
array[2] = 99;              -> en la posicion 2 del arreglo se coloca el valor 99


unsigned int *pointer;      -> se declara un puntero integer sin signo
pointer = &array[0];        -> direccion en memoria del elemento cero del arreglo
*(pointer+2) = 99;          -> 

pointer = array;            -> al puntero se le asigna la direccion del array


8 .Operaciones sobre bits particulares
--------------------------------------

En la programación de sistemas embebidos es muy común leer y escribir
registros del hardware. En particular, se requiere poder modificar 
ciertos bits y otros no. O conocer el valor de un bit particular.

8.1 Comprender una operación shift. Por ejemplo: (1 << 5)
  Escriba un programa que defina una variable de tipo char.
  Asigne la operacion shift mencionada arriba a esa variable.
  Indique cual es el valor en base 2 de la variable de tipo char.
  Indique cual es el valor en decimal.

    main()
    {
		char caracter = 1;        //  0000 0001  -> 1
		caracter = caracter << 5; //  0010 0000  -> 32
	}
    
    

8.2 Comprender una operación shift que luego se niega. Por ejemplo: ~(1 << 5)
  Escriba un programa que defina una variable de tipo char.
  Asigne a la variable la operacion shift mencionada arriba.
  Indique cual es el valor en base 2 de la variable de tipo char.
  Indique cual es el valor en decimal.

main()
    {
		char caracter = 1;           //  0000 0001  ->  1 
		caracter = ~(caracter << 5); //  11011111   -> -33
	}

8.3 Comprender los operadores AND y OR (& y |)
 0b100101 (un prefijo que indica formato binario, común en lenguajes de programación)

#define BIT3 3
unsigned char status;

status = 0b00110101;          
status = status | 0xFA; -> 0011 0101 | 1111 1010 ->  1111 1111
status = status & 20;   -> 1111 1111 & 0001 0100 ->  0001 0100
status |= (1 << 6);     -> 
status &= ~(1 << BIT3)
status |= (1 << BIT3)

- Poder verificar el estado de un bit.
- Poder obtener sólo una parte de los bits. Por ejemplo: & 0xF0

8.4 Para la siguiente definición:

unsigned char x = 11;

Indique el valor binario de cada bit de la variable x
(bit7 bit6 bit5 bit4 bit3 bit2 bit1 bit0)
  0	  0 	0	 0	  1	   0	1	 1

8.5 Se desea ejecutar un bloque de código en C si el bit 3 de la variable
x anterior está en 1. Complete la siguiente sentencia condicional if

if (  (x & 8) == 8 ) printf ("el bit3 de la variable registro es 1 \n");

8.6 Escriba una sentencia en C para eliminar los bits2, bit1 y bit0
(ponerlos en cero), sin modificar el resto de los bits.
  X =(x & 0b11111000) /  X =(x & 248)

8.7 Escriba una sentencia en C para poner asertar los bits7 y bit6 
(ponerlos en uno), sin modificar el resto de los bits.

x =(x | 0b1100 0000) /  x |= 0b11000000;

9. Registros de 8 bits, aritmetica de 16 a 32 bits
--------------------------------------------------

En ocasiones queremos realizar un cómputo, cuyo resultado debe ser
almacenado en un registro de 8 bits.

¿Qué sucede si quiero almacenar en un registro de 8bits el resultado
de esta operación?

 -> Se perderar bits del resultado

unsigned char RES;
unsigned char var;
RES = var * 500 /190;

Si var = 190, ¿por qué motivo esta operación no dará un resultado
esperado? (un valor < 255).

El resultado correcto esperado seria 500, pero dado que le valor esta fuera de rango el resultado es 244

10. Desarrollar el programa que se detalle en archivo aparte.

Aun sin realizar
