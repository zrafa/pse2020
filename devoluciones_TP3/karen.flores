Devolución de los trabajos prácticos 2020
=========================================

Alumna: Karen Flores

Pros:
Excelente predisposición. 
Dominio del código para hacerlo funcional aún si hay inconvenientes
que cuestan entender.

Cons:
Pocas consultas sobre los temas, lo que no permite discernir que se
entiende de lo que no se entiender.


Comentarios sobre la práctica de la programación en C
-----------------------------------------------------


Buenos nombres para utils_conteo.c y utils_knight.c


Sería conveniente un README mínimo explicando 
 - que hace el programa
 - como se compila y se verifica (testing)
 - alguna consideración sobre el código o uso


En main.c hay un 


	if(rcvChar == 'c') {
		let_init(); 
		binario();
		apagar_led();
	}
	if(rcvChar == 'k') {
		led_init(); 
		knight_rider();



Faltan normas de estilo. Van espacioes entre el if y el (.
el ) y {, entre } y else, etc.

Lo anterior debería ser:

        if (rcvChar == 'c') {
                ...
        } else if (rcvChar == 'k') {

(ver el else if y tambien el estilo en los espacios).


Cuando existen ifs anidades y la comparación es contra
una única variable entera puede ser mas conveniente
usar 'case (rcvChar)'



En serial.c

	if(start == 0) {

Falta espacio entre if y (.

La variable global 'start' tendría que ser mas facil de comprender.
¿Tal vez 'inicializado' o 'no_inicializado'?


En serial_put_char():

     while ( !((*puerto_serial).status_control_a & 0x20) ); 

0x20 es un número mágico

Una buena práctica es colocar valores constantes con nombres (macros o
variables constantes con nombre), porque con el tiempo son dificiles 
de comprender si simplemente aparecen números "harcodeados" en el código
(se los llama "valores magicos").

Por ahí queda mas claro tener algo así:

#define SERIAL_READY 0x20




En serial_put_char:
     while ( !((*puerto_serial).status_control_a & 0x20) ); 


    /* Send the character via the serial port. */
    /* (escribir el dato al registro de datos de E/S */
	(*puerto_serial).data_es = c;




Pareciera que (*puerto_serial).data_es = c; estuviera dentro del while,
por la sangría.


(*puerto_serial).data_es y todas las demás están bien. 
De todas maneras, en C existe el operador -> para punteros, que es 
una indirección y luego desplazamiento. Queda mas legible y es 
mas usado. Es decir,
esta forma:
        (*puerto_serial).data_es 
es igual a 
        puerto_serial->data_es
(esta última es más utilizada).



En utils_conteo.c:

Bien la definición de las macros LED y BIT2.

Números mágicos en led_init().

En esperar():
	volatile unsigned long i;
	/* delay de 1/2 segundo */


i no tiene que ser volatile. volatile es unicamente para punteros
a registros del hardware, que puedan ser modificados por acciones
asincrónicas al flujo de ejecucion de instrucciones.

Acá i es una variable normal de la funcion del programa, por lo
que unicamente es modificada por las instrucciones del programa
(y por lo tanto, no lleva volatile).



Lo mismo en las demás funciones, todas definen volatile
a variables con valores que no son punteros a registros del hardware.


En utils_conteo.c está get_estado(). Es una función relativa
al pulsador, por lo que no parece adecuado que esté en un modulo
llamado utils_conteo.c

Para el pulsador podría ser una buena idea tener una función que se llame
int boton_presionado() {
}
que devuelva 1 si está pulsado.

Entonces, al usarlo, sería facil de leer:

if (boton_presionado()) etc....


El binario() no tiene un nombre adecuado. Entiendo que es 
hace el conteo binario. POr ahí llamarla conteo_binario()?

Esa función debería ser facil de implementar con una variable
unsigned char c;
c++;

Luego, desplazar c y guardarlo en portb.
Recuerden que portb es un puerto paralelo.


